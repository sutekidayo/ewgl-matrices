#summary m4x4 docs

= Class m4x4 =

*Class methods* : I ,set, $, makeFrustum, makePerspective, makeOrtho, makeRotate, makeScale

*Instance methods* : identity, I, e, row, col, dimensions, rows, cols, eql, setElements, dup, map, add, substract, x, multiply, translate, rotate, scale, transpose, max, min, indexOf, diagonal, det, determinant, isSingular, tr, trace, inverse, view, rand

*Instance variables* : 
elements  = A 16 wide WebGLFloatArray which hold your matrix like opengl 


==Class methods==

-----

=== I ===

This returns a new identitymatrix.

{{{
m4x4.I();
}}}

-----

=== set ===

This returns a new matrix with the specified arguments.

{{{
m4x4.set(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4);

or 

var array1 = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4];
m4x4.set(array1);
}}}

equivalent to m4x4.$

-----

=== $ ===

This returns a new matrix with the specified arguments.

{{{
m4x4.set(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4);

or 

var array1 = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4];
m4x4.set(array1);
}}}

equivalent to m4x4.set

=== makeFrustrum ===

This returns a new matrix for a projection frustum with the given parameters.

{{{
m4x4.makeFrustrum(left, right, bottom, top, znear, zfar);
}}}

-----

=== makePerspective ===

This returns a new matrix for a perspective projection with the given parameters.

{{{
m4x4.makePerspective(fovy, aspect, znear, zfar);
}}}

-----

=== makeOrtho ===

This returns a new matrix for an orthogonal frustum projection with the given parameters.

{{{
m4x4.makeOrtho(left, right, bottom, top, znear, zfar)
}}}

-----

=== makeRotate ===

This returns a new matrix for rotations.

{{{
m4x4.makeRotate(angle,vector);
}}}

-----

=== makeScale ===

This returns a new matrix for scaling purposes.

{{{
m4x4.makeScale(vector);
}}}

-----

==Instance methods==

TODO